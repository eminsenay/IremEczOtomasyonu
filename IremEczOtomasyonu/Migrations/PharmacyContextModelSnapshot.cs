// <auto-generated />
using System;
using IremEczOtomasyonu.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EFCoreTest.Migrations
{
    [DbContext(typeof(PharmacyContext))]
    partial class PharmacyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854");

            modelBuilder.Entity("EFCoreTest.Models.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Birthday");

                    b.Property<string>("DetailedInfo");

                    b.Property<string>("FirstName");

                    b.Property<string>("Job");

                    b.Property<string>("LastName");

                    b.Property<string>("MaritalStatus");

                    b.Property<string>("PhoneHome");

                    b.Property<string>("PhoneMobile");

                    b.Property<byte[]>("Photo");

                    b.Property<string>("SkinType");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("EFCoreTest.Models.ExpirationDate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ExDate");

                    b.Property<int>("NumItems");

                    b.Property<Guid>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ExpirationDates");
                });

            modelBuilder.Entity("EFCoreTest.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Barcode");

                    b.Property<string>("Brand");

                    b.Property<decimal?>("CurrentBuyingPrice");

                    b.Property<decimal?>("CurrentSellingPrice");

                    b.Property<string>("Name");

                    b.Property<int>("NumItems");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("EFCoreTest.Models.ProductPurchase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ExDate");

                    b.Property<int>("NumItems");

                    b.Property<decimal>("Price");

                    b.Property<Guid>("ProductId");

                    b.Property<DateTime>("PurchaseDate");

                    b.Property<string>("Remarks");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPurchases");
                });

            modelBuilder.Entity("EFCoreTest.Models.ProductSale", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CustomerId");

                    b.Property<string>("Remarks");

                    b.Property<DateTime>("SaleDate");

                    b.Property<decimal>("TotalPrice");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("ProductSales");
                });

            modelBuilder.Entity("EFCoreTest.Models.SaleItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ExDate");

                    b.Property<int>("NumSold");

                    b.Property<Guid>("ProductId");

                    b.Property<Guid>("ProductSaleId");

                    b.Property<decimal>("UnitPrice");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductSaleId");

                    b.ToTable("SaleItems");
                });

            modelBuilder.Entity("EFCoreTest.Models.ExpirationDate", b =>
                {
                    b.HasOne("EFCoreTest.Models.Product", "Product")
                        .WithMany("ExpirationDates")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EFCoreTest.Models.ProductPurchase", b =>
                {
                    b.HasOne("EFCoreTest.Models.Product", "Product")
                        .WithMany("ProductPurchases")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EFCoreTest.Models.ProductSale", b =>
                {
                    b.HasOne("EFCoreTest.Models.Customer", "Customer")
                        .WithMany("ProductSales")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EFCoreTest.Models.SaleItem", b =>
                {
                    b.HasOne("EFCoreTest.Models.Product", "Product")
                        .WithMany("SaleItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EFCoreTest.Models.ProductSale", "ProductSale")
                        .WithMany("SaleItems")
                        .HasForeignKey("ProductSaleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
